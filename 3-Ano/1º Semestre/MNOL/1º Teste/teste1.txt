TESTE 1

ERROS

x = ...   -> δx = menor meia casa decimal
y = ...   -> δy = "
z = ...   -> δz = "

Fazer sistema com os intervalos

δf/δx
δf/δy
δf/δz

Mx
My
Mz

δf < ... formulário

Ver menor meia casa decimal do δf (a)

Substituir em f os valores inicias estimados de cada variável (b)

Colocar (b) sobre (a) e contar os alg significativos (à esquerda os 0's não contam)

----------------------------------------------------------------------------------------------------------------------------------------------------------

SISTEMAS DE EQUAÇÕES LINEARES - MÉTODOS DIRETOS

Nota: colocar como pivot o maior valor da coluna

det(A) = (-1)^nº troca de linhas * valores da diagonal da matriz resultante do EGPP

1ª coluna da matriz inversa = U \ 1º coluna da matriz J
2ª coluna da matriz inversa = U \ 2º coluna da matriz J
3ª coluna da matriz inversa = U \ 3º coluna da matriz J
4ª coluna da matriz inversa = U \ 4º coluna da matriz J

----------------------------------------------------------------------------------------------------------------------------------------------------------

MÉTODOS ITERATIVOS

Caraterísticas do método da Secante:
- aproxima o gráfico da função por uma reta - o ponto de interseção da reta com o eixo dos X’s é a aproximação à solução;
- necessita de 2 pontos iniciais (x1 e x2);
- não utiliza derivadas;
- tem convergência local superlinear.

Algoritmo do método da Secante

1 - k = 2; fornecer aproximações iniciais x1 e x2;
2 - calcular xk+1;
3 - verificar critério de paragem;
4 - se verificado x* ≈ xk+1 [FIM] senão k ← k + 1 e voltar ao passo 2.

Características do método de Newton:
- aproxima o gráfico da função por uma reta tangente a f(x) no ponto da iteração corrente;
- necessita de 1 ponto inicial (x1);
- utiliza derivadas;
- tem convergência local quadrática;
- f'(x) != 0.

Algoritmo do método Newton

1 - k = 1; fornecer aproximação inicial x1;
2 - calcular f'(xk);
3 - calcular xk+1;
4 - verificar critério de paragem;
5 - se verificado x* ≈ xk+1 [FIM] senão k ← k + 1 e voltar ao passo 2.

----------------------------------------------------------------------------------------------------------------------------------------------------------

SISTEMAS DE EQUAÇÕES NÃO LINEARES

Algoritmo do método Newton

1 - k = 1; fornecer aproximação inicial (vector x1);
2 - Resolver o sistema linear J(xk)∆k = −f(xk) para calcular o vector ∆k (EGPP);
3 - Actualizar o vector aproximação xk+1 = xk + ∆k;
4 - Verificar critério de paragem - se verificado x* ≈ xk+1 [FIM] senão k ← k + 1 e voltar para passo 2.

----------------------------------------------------------------------------------------------------------------------------------------------------------

INTERPOLAÇÃO POLINOMIAL

Algoritmo do polinómio interpolador grau n (PI)

1 - escolher da tabela as colunas cujo x é mais próximo do valor inicial
2 - 

    xi  fi  dd1 dd2 ... ddn

3 - Do "fi" até ao "ddn" rodears sempre o valor superior
4 - Pn(x) = f0 + valor_superior_fi(x-x1) + valor_superior_dd1(x-x1)(x-x2) + ...
5 - Pn(a) = ... (a -> valor inicial)

Algoritmo do erro truncatura de (PI)

1 - fazer o passo 2 de (PI) grau n com as colunas extras em baixo
2 - |ET| <= |(x − x0)(x − x1)...(x − xn) * ddn+1| !!!! APENAS COLOCAR AQUI OS N+1 VALORES !!!!

NOTA: f é um polinómio de grau n se fizermos (PI) com toda a tabela de valores e ddn terão valores iguais



Algoritmo da spline completa

1 - cortar a segunda e penúltima coluna da tabela
2 - f'0 = (y2-y1)/(x2-x1)
3 - f'n = (yc - yc-1)/(xc - xc-1)
4 - i = 0 (Ponto exterior => spline completa formulário 1ª linha)
5 - for(i = 1; i < num_colunas_atualizadas; i++)
        Se i for ponto exterior fazer spline completa senão usar fórmula dos pontos interiores

6 - Pegar em todos os resultados e colocar em matrizes
7 - Fazer EGPP
8 - Ver em que segmento da tabela atualizada fica o valor inicial (i=3 p.e)
9 -  3
    S (x) = formulário
     3

10 - 3
    S (ponto_inicial) = ...
     3


Algoritmo do erro truncatura da spline

|f(x) − s3(x)| ≤ 5/384 * h^4 * M4
h - espaçamento máximo entre os pontos escolhidos (os eliminados não contam)

1 - Fazer (PI) com toda a tabela
2 - Escolher valor de dd4 com maior valor em módulo
3 - M4 = valor_escolhido * 4!
4 - Substituir na fórmula

----------------------------------------------------------------------------------------------------------------------------------------------------------

INTEGRAÇÃO NUMÉRICA

n - número de saltos
h - valor intervalo

Trapézio
- n qualquer e h grande (> 10)
- grau = 1 -> erro de truncatura é zero

Simpson
- n par e h pequeno
- grau <= 3 -> erro de truncatura é zero

3/8 
- n múltiplo de 3
- grau <= 3 -> erro de truncatura é zero


M4 = valor máximo de f^(iv)

n = (b-a)/h